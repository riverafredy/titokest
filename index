6873: function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.add = t.toBig = t.split = t.fromBig = void 0;
        let a = BigInt(4294967296 - 1)
          , r = BigInt(32);
        function n(e, t=!1) {
            return t ? {
                h: Number(e & a),
                l: Number(e >> r & a)
            } : {
                h: 0 | Number(e >> r & a),
                l: 0 | Number(e & a)
            }
        }
        function i(e, t=!1) {
            let a = new Uint32Array(e.length)
              , r = new Uint32Array(e.length);
            for (let i = 0; i < e.length; i++) {
                let {h: c, l: f} = n(e[i], t);
                [a[i],r[i]] = [c, f]
            }
            return [a, r]
        }
        t.fromBig = n,
        t.split = i;
        let c = (e,t)=>BigInt(e >>> 0) << r | BigInt(t >>> 0);
        function f(e, t, a, r) {
            let n = (t >>> 0) + (r >>> 0);
            return {
                h: e + a + (n / 4294967296 | 0) | 0,
                l: 0 | n
            }
        }
        t.toBig = c,
        t.add = f;
        let d = {
            fromBig: n,
            split: i,
            toBig: t.toBig,
            shrSH: (e,t,a)=>e >>> a,
            shrSL: (e,t,a)=>e << 32 - a | t >>> a,
            rotrSH: (e,t,a)=>e >>> a | t << 32 - a,
            rotrSL: (e,t,a)=>e << 32 - a | t >>> a,
            rotrBH: (e,t,a)=>e << 64 - a | t >>> a - 32,
            rotrBL: (e,t,a)=>e >>> a - 32 | t << 64 - a,
            rotr32H: (e,t)=>t,
            rotr32L: (e,t)=>e,
            rotlSH: (e,t,a)=>e << a | t >>> 32 - a,
            rotlSL: (e,t,a)=>t << a | e >>> 32 - a,
            rotlBH: (e,t,a)=>t << a - 32 | e >>> 64 - a,
            rotlBL: (e,t,a)=>e << a - 32 | t >>> 64 - a,
            add: f,
            add3L: (e,t,a)=>(e >>> 0) + (t >>> 0) + (a >>> 0),
            add3H: (e,t,a,r)=>t + a + r + (e / 4294967296 | 0) | 0,
            add4L: (e,t,a,r)=>(e >>> 0) + (t >>> 0) + (a >>> 0) + (r >>> 0),
            add4H: (e,t,a,r,n)=>t + a + r + n + (e / 4294967296 | 0) | 0,
            add5H: (e,t,a,r,n,i)=>t + a + r + n + i + (e / 4294967296 | 0) | 0,
            add5L: (e,t,a,r,n)=>(e >>> 0) + (t >>> 0) + (a >>> 0) + (r >>> 0) + (n >>> 0)
        };
        t.default = d
    },
    4421: function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.crypto = void 0,
        t.crypto = {
            node: void 0,
            web: "object" == typeof self && "crypto"in self ? self.crypto : void 0
        }
    },
    5426: function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.shake256 = t.shake128 = t.keccak_512 = t.keccak_384 = t.keccak_256 = t.keccak_224 = t.sha3_512 = t.sha3_384 = t.sha3_256 = t.sha3_224 = t.Keccak = t.keccakP = void 0;
        let r = a(7320)
          , n = a(6873)
          , i = a(8089)
          , [c,f,d] = [[], [], []]
          , s = BigInt(0)
          , o = BigInt(1)
          , u = BigInt(2)
          , b = BigInt(7)
          , h = BigInt(256)
          , l = BigInt(113);
        for (let e = 0, t = o, a = 1, r = 0; e < 24; e++) {
            [a,r] = [r, (2 * a + 3 * r) % 5],
            c.push(2 * (5 * r + a)),
            f.push((e + 1) * (e + 2) / 2 % 64);
            let n = s;
            for (let e = 0; e < 7; e++)
                (t = (t << o ^ (t >> b) * l) % h) & u && (n ^= o << (o << BigInt(e)) - o);
            d.push(n)
        }
        let[p,g] = n.default.split(d, !0)
          , m = (e,t,a)=>a > 32 ? n.default.rotlBH(e, t, a) : n.default.rotlSH(e, t, a)
          , y = (e,t,a)=>a > 32 ? n.default.rotlBL(e, t, a) : n.default.rotlSL(e, t, a);
        function v(e, t=24) {
            let a = new Uint32Array(10);
            for (let r = 24 - t; r < 24; r++) {
                for (let t = 0; t < 10; t++)
                    a[t] = e[t] ^ e[t + 10] ^ e[t + 20] ^ e[t + 30] ^ e[t + 40];
                for (let t = 0; t < 10; t += 2) {
                    let r = (t + 8) % 10
                      , n = (t + 2) % 10
                      , i = a[n]
                      , c = a[n + 1]
                      , f = m(i, c, 1) ^ a[r]
                      , d = y(i, c, 1) ^ a[r + 1];
                    for (let a = 0; a < 50; a += 10)
                        e[t + a] ^= f,
                        e[t + a + 1] ^= d
                }
                let t = e[2]
                  , n = e[3];
                for (let a = 0; a < 24; a++) {
                    let r = f[a]
                      , i = m(t, n, r)
                      , d = y(t, n, r)
                      , s = c[a];
                    t = e[s],
                    n = e[s + 1],
                    e[s] = i,
                    e[s + 1] = d
                }
                for (let t = 0; t < 50; t += 10) {
                    for (let r = 0; r < 10; r++)
                        a[r] = e[t + r];
                    for (let r = 0; r < 10; r++)
                        e[t + r] ^= ~a[(r + 2) % 10] & a[(r + 4) % 10]
                }
                e[0] ^= p[r],
                e[1] ^= g[r]
            }
            a.fill(0)
        }
        t.keccakP = v;
        class _ extends i.Hash {
            constructor(e, t, a, n=!1, c=24) {
                if (super(),
                this.blockLen = e,
                this.suffix = t,
                this.outputLen = a,
                this.enableXOF = n,
                this.rounds = c,
                this.pos = 0,
                this.posOut = 0,
                this.finished = !1,
                this.destroyed = !1,
                r.default.number(a),
                0 >= this.blockLen || this.blockLen >= 200)
                    throw Error("Sha3 supports only keccak-f1600 function");
                this.state = new Uint8Array(200),
                this.state32 = (0,
                i.u32)(this.state)
            }
            keccak() {
                v(this.state32, this.rounds),
                this.posOut = 0,
                this.pos = 0
            }
            update(e) {
                r.default.exists(this);
                let {blockLen: t, state: a} = this;
                e = (0,
                i.toBytes)(e);
                let n = e.length;
                for (let r = 0; r < n; ) {
                    let i = Math.min(t - this.pos, n - r);
                    for (let t = 0; t < i; t++)
                        a[this.pos++] ^= e[r++];
                    this.pos === t && this.keccak()
                }
                return this
            }
            finish() {
                if (this.finished)
                    return;
                this.finished = !0;
                let {state: e, suffix: t, pos: a, blockLen: r} = this;
                e[a] ^= t,
                (128 & t) != 0 && a === r - 1 && this.keccak(),
                e[r - 1] ^= 128,
                this.keccak()
            }
            writeInto(e) {
                r.default.exists(this, !1),
                r.default.bytes(e),
                this.finish();
                let t = this.state
                  , {blockLen: a} = this;
                for (let r = 0, n = e.length; r < n; ) {
                    this.posOut >= a && this.keccak();
                    let i = Math.min(a - this.posOut, n - r);
                    e.set(t.subarray(this.posOut, this.posOut + i), r),
                    this.posOut += i,
                    r += i
                }
                return e
            }
            xofInto(e) {
                if (!this.enableXOF)
                    throw Error("XOF is not possible for this instance");
                return this.writeInto(e)
            }
            xof(e) {
                return r.default.number(e),
                this.xofInto(new Uint8Array(e))
            }
            digestInto(e) {
                if (r.default.output(e, this),
                this.finished)
                    throw Error("digest() was already called");
                return this.writeInto(e),
                this.destroy(),
                e
            }
            digest() {
                return this.digestInto(new Uint8Array(this.outputLen))
            }
            destroy() {
                this.destroyed = !0,
                this.state.fill(0)
            }
            _cloneInto(e) {
                let {blockLen: t, suffix: a, outputLen: r, rounds: n, enableXOF: i} = this;
                return e || (e = new _(t,a,r,i,n)),
                e.state32.set(this.state32),
                e.pos = this.pos,
                e.posOut = this.posOut,
                e.finished = this.finished,
                e.rounds = n,
                e.suffix = a,
                e.outputLen = r,
                e.enableXOF = i,
                e.destroyed = this.destroyed,
                e
            }
        }
